B <- c("react4","react3")
(intersect(A,B))
(is.null(intersect(A,B)))
(is.boolean(intersect(A,B)=="0"))
A <- c("react1","react2")
B <- c("react4","react3")
(intersect(A,B))
(is.null(intersect(A,B)))
(is.boolean(intersect(A,B)==TRUE))
A <- c("react1","react2")
B <- c("react4","react3")
(intersect(A,B))
(is.null(intersect(A,B)))
(intersect(A,B)==TRUE)
A <- c("react1","react2")
B <- c("react2","react3")
(intersect(A,B))
(is.null(intersect(A,B)))
(intersect(A,B))
A <- c("react1","react2")
B <- c("react2","react3")
(is.character(intersect(A,B)))
(is.null(intersect(A,B)))
(intersect(A,B))
A <- c("react1","react2")
B <- c("react5","react3")
(is.character(intersect(A,B)))
(is.null(intersect(A,B)))
(intersect(A,B))
A <- c("react1","react2")
B <- c("react5","react3")
res <-intersect(A,B)
(is.null(intersect(A,B)))
(intersect(A,B))
A <- c("react1","react2")
B <- c("react5","react3")
res <-intersect(A,B)
(is.empty(res))
install.packages("DIZtools")
rm(list = ls())
#library(xlsx)
library(openxlsx)
library(xml2)
library(XML)
library("methods")
library(DIZtools)
A <- c("react1","react2")
B <- c("react5","react3")
res <-intersect(A,B)
(is.empty(res))
(is.null(intersect(A,B)))
(intersect(A,B))
A <- c("react1","react2")
B <- c("react2","react3")
res <-intersect(A,B)
(is.empty(res))
(is.null(intersect(A,B)))
(intersect(A,B))
reactDiff<-c("M_CO2_ext","M_ETOH_ext","M_OXY_ext") # quand ces id deréactifs sont présent en réactifs alors c'est une loi de diffusion sinon c'est MM généralisé
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
#library(xlsx)
library(openxlsx)
library(xml2)
library(XML)
library("methods")
library(DIZtools)
# Définir le nom du fichier xlsx
file <- "param_ecoli_2023.xlsx"
# Lire les noms des feuilles du fichier xls
sheets <- getSheetNames(file)
# Créer une liste pour stocker les données de chaque feuille
parametersData <- list()
# Boucle pour parcourir toutes les feuilles du fichier
for (i in 1:length(sheets)) {
# Charger les données de la feuille i dans un dataframe
df <- read.xlsx(file, sheet = sheets[i], colNames = FALSE)
# Ajouter le dataframe à la liste de données
parametersData[[i]] <- df
}
names(parametersData)<-sheets
# Read the xml file
ecoliData <- read_xml("ccm_ross.xml")
ecoliData
ecoliData_xml <- xmlParse("ccm_ross.xml")
xml_data <- xmlToList(ecoliData_xml)
print(xml_data)
(xml_data$model$listOfCompartments[[2]])
reactDiff<-c("M_CO2_ext","M_ETOH_ext","M_OXY_ext") # quand ces id deréactifs sont présent en réactifs alors c'est une loi de diffusion sinon c'est MM généralisé
## Diffusion kinetic ##
# Cext : concentration out
# Cin : concentation in
# kdiff : diffusion constant
r_diffusion <- function(Cext,Cin,kdiff){
return((Cext-Cin)*kdiff)
}
## Michaelis-Menten Global ##
# kcat (value couple) : c(kcat+, kcat-) kinetic constant
# keq  : kinetic constant
# substrat  : vector of the substrat name of the reaction
# product  : vector of the product name of the reaction
# stochio_substrat : vector of the stochiometric of substrat
# stochio_product : vector of the stochiometric of product
MM_G <- function(kcat,keq,substrat, product, km_substrat, km_product, stochio_substrat, stochio_produit){
return(keq* (kcat[1]*prod((substrat/km_substrat)^stochio_substrat)-kcat[2]*prod((product/km_product)^stochio_product))/(1 + prod((substrat/km_substrat)^stochio_substrat)+ prod((product/km_product)^stochio_product)))
}
(xml_data$model$listOfCompartments[[2]])
essai<-(xml_data$model$listOfSpecies[[1]][[2]])
# Détermination du nombre de métabolites
nombreMetabo <- as.numeric(length(xml_data$model$listOfSpecies)) # 60 métabolites
nombreReact <- as.numeric(length(xml_data$model$listOfReactions)) # 57 réactions
# Récupération du nom des métabolites
metaboliteName <-c() # name
metaboliteNameMatrix <-c() # id # ATTENTION Dans les réaction on retrouve l'id et pas le nom exacte !!!!
for (i in seq(nombreMetabo)){
metaboliteName <-c(metaboliteName,xml_data$model$listOfSpecies[[i]][[2]])
metaboliteNameMatrix <-c(metaboliteNameMatrix,xml_data$model$listOfSpecies[[i]][[1]])
}
(metaboliteName)
(metaboliteNameMatrix)
# Initialistion de la matrice
# Avec en ligne l'id des molécules et en colones le nom de la réaction
matrix_sto_ode <- matrix(0,nrow = nombreMetabo, ncol = nombreReact)
colnames(matrix_sto_ode) <- as.character(1:nombreReact)
rownames(matrix_sto_ode) <- metaboliteNameMatrix
#matrix_sto_ode['M_ACETATE_ext',1] <- 5
# Remplissage de la matrice
#print(nombreReact)
# Pour chaque réaction
for (numReact in seq(nombreReact)){
#print(numReact)
# Récupération des ## Substrats ##
for (reactant in seq(length(xml_data$model$listOfReactions[[numReact]][[1]]))){
#print(reactant)
# Pour chaque réactant :
# on récupère l'id et la stochiométrie
nameReactant <- as.character(xml_data$model$listOfReactions[[numReact]][[1]][[reactant]][[1]]) # id de la molécule (avec m_ devant)
stochioReactant <- - as.numeric(xml_data$model$listOfReactions[[numReact]][[1]][[reactant]][[2]])
#print(nameReactant)
#print(stochioReactant)
#print("")
# Ajout dans la matrice
matrix_sto_ode[nameReactant,numReact] <-  stochioReactant # Attention Signe négatif car ici on consome la molécule
}
# Récupération des ## PRODUITS ##
for (reactant in seq(length(xml_data$model$listOfReactions[[numReact]][[2]]))){
# Pour chaque réactant :
# on récupère l'id et la stochiométrie
nameReactant <- as.character(xml_data$model$listOfReactions[[numReact]][[2]][[reactant]][[1]]) # id de la molécule (avec m_ devant)
stochioReactant <- as.numeric(xml_data$model$listOfReactions[[numReact]][[2]][[reactant]][[2]])
# Ajout dans la matrice
matrix_sto_ode[nameReactant,numReact] <- stochioReactant
}
}
(xml_data$model$listOfReactions[[1]][[2]])
(xml_data$model$listOfReactions[[1]][[1]][[1]][[1]]) # id de la molécule (avec m_ devant)
(xml_data$model$listOfReactions[[1]][[1]][[1]][[2]]) # stochio
nrow(matrix_sto_ode)
matrix_phi <- matrix(0,nrow = nrow(matrix_sto_ode))
A <- c("react1","react2")
B <- c("react2","react3")
res <-intersect(A,B)
(is.empty(res))
(is.null(intersect(A,B)))
(intersect(A,B))
A <- c("react1","react2")
B <- c("react2","react3")
C <- c("react4")
res <-intersect(A,B)
(is.empty(res))
(is.null(intersect(A,B)))
(intersect(A,B))
vect <- c(intersect(A,B),intersect(A,C))
A <- c("react1","react2")
B <- c("react2","react3")
C <- c("react4")
res <-intersect(A,B)
(is.empty(res))
(is.null(intersect(A,B)))
(intersect(A,B))
vect <- c(intersect(A,B),intersect(A,C))
vect2 <- c(union(A,B)-intersect(A,B))
A <- c("react1","react2")
B <- c("react2","react3")
C <- c("react4")
res <-intersect(A,B)
(is.empty(res))
(is.null(intersect(A,B)))
(intersect(A,B))
vect <- c(intersect(A,B),intersect(A,C))
vect2 <- union(A,B)-intersect(A,B)
A <- c("react1","react2")
B <- c("react2","react3")
C <- c("react4")
res <-intersect(A,B)
(is.empty(res))
(is.null(intersect(A,B)))
(intersect(A,B))
vect <- c(intersect(A,B),intersect(A,C))
vect2 <- c(setdiff(A,B),sefdiff(B,A))
A <- c("react1","react2")
B <- c("react2","react3")
C <- c("react4")
res <-intersect(A,B)
(is.empty(res))
(is.null(intersect(A,B)))
(intersect(A,B))
vect <- c(intersect(A,B),intersect(A,C))
vect2 <- c(setdiff(A,B),sefdiff(B,A))
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
#library(xlsx)
library(openxlsx)
library(xml2)
library(XML)
library("methods")
library(DIZtools)
# Définir le nom du fichier xlsx
file <- "param_ecoli_2023.xlsx"
# Lire les noms des feuilles du fichier xls
sheets <- getSheetNames(file)
# Créer une liste pour stocker les données de chaque feuille
parametersData <- list()
# Boucle pour parcourir toutes les feuilles du fichier
for (i in 1:length(sheets)) {
# Charger les données de la feuille i dans un dataframe
df <- read.xlsx(file, sheet = sheets[i], colNames = FALSE)
# Ajouter le dataframe à la liste de données
parametersData[[i]] <- df
}
names(parametersData)<-sheets
# Read the xml file
ecoliData <- read_xml("ccm_ross.xml")
ecoliData
ecoliData_xml <- xmlParse("ccm_ross.xml")
xml_data <- xmlToList(ecoliData_xml)
print(xml_data)
(xml_data$model$listOfCompartments[[2]])
reactDiff<-c("M_CO2_ext","M_ETOH_ext","M_OXY_ext") # quand ces id deréactifs sont présent en réactifs alors c'est une loi de diffusion sinon c'est MM généralisé
## Diffusion kinetic ##
# Cext : concentration out
# Cin : concentation in
# kdiff : diffusion constant
r_diffusion <- function(Cext,Cin,kdiff){
return((Cext-Cin)*kdiff)
}
## Michaelis-Menten Global ##
# kcat (value couple) : c(kcat+, kcat-) kinetic constant
# keq  : kinetic constant
# substrat  : vector of the substrat name of the reaction
# product  : vector of the product name of the reaction
# stochio_substrat : vector of the stochiometric of substrat
# stochio_product : vector of the stochiometric of product
MM_G <- function(kcat,keq,substrat, product, km_substrat, km_product, stochio_substrat, stochio_produit){
return(keq* (kcat[1]*prod((substrat/km_substrat)^stochio_substrat)-kcat[2]*prod((product/km_product)^stochio_product))/(1 + prod((substrat/km_substrat)^stochio_substrat)+ prod((product/km_product)^stochio_product)))
}
(xml_data$model$listOfCompartments[[2]])
essai<-(xml_data$model$listOfSpecies[[1]][[2]])
# Détermination du nombre de métabolites
nombreMetabo <- as.numeric(length(xml_data$model$listOfSpecies)) # 60 métabolites
nombreReact <- as.numeric(length(xml_data$model$listOfReactions)) # 57 réactions
# Récupération du nom des métabolites
metaboliteName <-c() # name
metaboliteNameMatrix <-c() # id # ATTENTION Dans les réaction on retrouve l'id et pas le nom exacte !!!!
for (i in seq(nombreMetabo)){
metaboliteName <-c(metaboliteName,xml_data$model$listOfSpecies[[i]][[2]])
metaboliteNameMatrix <-c(metaboliteNameMatrix,xml_data$model$listOfSpecies[[i]][[1]])
}
(metaboliteName)
(metaboliteNameMatrix)
# Initialistion de la matrice
# Avec en ligne l'id des molécules et en colones le nom de la réaction
matrix_sto_ode <- matrix(0,nrow = nombreMetabo, ncol = nombreReact)
colnames(matrix_sto_ode) <- as.character(1:nombreReact)
rownames(matrix_sto_ode) <- metaboliteNameMatrix
#matrix_sto_ode['M_ACETATE_ext',1] <- 5
# Remplissage de la matrice
#print(nombreReact)
# Pour chaque réaction
for (numReact in seq(nombreReact)){
#print(numReact)
# Récupération des ## Substrats ##
for (reactant in seq(length(xml_data$model$listOfReactions[[numReact]][[1]]))){
#print(reactant)
# Pour chaque réactant :
# on récupère l'id et la stochiométrie
nameReactant <- as.character(xml_data$model$listOfReactions[[numReact]][[1]][[reactant]][[1]]) # id de la molécule (avec m_ devant)
stochioReactant <- - as.numeric(xml_data$model$listOfReactions[[numReact]][[1]][[reactant]][[2]])
#print(nameReactant)
#print(stochioReactant)
#print("")
# Ajout dans la matrice
matrix_sto_ode[nameReactant,numReact] <-  stochioReactant # Attention Signe négatif car ici on consome la molécule
}
# Récupération des ## PRODUITS ##
for (reactant in seq(length(xml_data$model$listOfReactions[[numReact]][[2]]))){
# Pour chaque réactant :
# on récupère l'id et la stochiométrie
nameReactant <- as.character(xml_data$model$listOfReactions[[numReact]][[2]][[reactant]][[1]]) # id de la molécule (avec m_ devant)
stochioReactant <- as.numeric(xml_data$model$listOfReactions[[numReact]][[2]][[reactant]][[2]])
# Ajout dans la matrice
matrix_sto_ode[nameReactant,numReact] <- stochioReactant
}
}
(xml_data$model$listOfReactions[[1]][[2]])
(xml_data$model$listOfReactions[[1]][[1]][[1]][[1]]) # id de la molécule (avec m_ devant)
(xml_data$model$listOfReactions[[1]][[1]][[1]][[2]]) # stochio
nrow(matrix_sto_ode)
matrix_phi <- matrix(0,nrow = nrow(matrix_sto_ode))
A <- c("react1","react2")
B <- c("react2","react3")
C <- c("react4")
res <-intersect(A,B)
(is.empty(res))
(is.null(intersect(A,B)))
(intersect(A,B))
vect <- c(intersect(A,B),intersect(A,C))
vect2 <- c(setdiff(A,B),sefdiff(B,A))
A <- c("react1","react2")
B <- c("react2","react3")
C <- c("react4")
res <-intersect(A,B)
res1 <- setdiff(A,B)
(is.empty(res))
(is.null(intersect(A,B)))
(intersect(A,B))
vect <- c(intersect(A,B),intersect(A,C))
vect2 <- c(setdiff(A,B),sefdiff(B,A))
A <- c("react1","react2")
B <- c("react2","react3")
C <- c("react4")
res <-intersect(A,B)
res1 <- setdiff(A,B)
(is.empty(res))
(is.null(intersect(A,B)))
(intersect(A,B))
vect <- c(intersect(A,B),intersect(A,C))
vect2 <- c(setdiff(A,B),setdiff(B,A))
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
#library(xlsx)
library(openxlsx)
library(xml2)
library(XML)
library("methods")
library(DIZtools)
# Définir le nom du fichier xlsx
file <- "param_ecoli_2023.xlsx"
# Lire les noms des feuilles du fichier xls
sheets <- getSheetNames(file)
# Créer une liste pour stocker les données de chaque feuille
parametersData <- list()
# Boucle pour parcourir toutes les feuilles du fichier
for (i in 1:length(sheets)) {
# Charger les données de la feuille i dans un dataframe
df <- read.xlsx(file, sheet = sheets[i], colNames = FALSE)
# Ajouter le dataframe à la liste de données
parametersData[[i]] <- df
}
names(parametersData)<-sheets
# Read the xml file
ecoliData <- read_xml("ccm_ross.xml")
ecoliData
ecoliData_xml <- xmlParse("ccm_ross.xml")
xml_data <- xmlToList(ecoliData_xml)
print(xml_data)
(xml_data$model$listOfCompartments[[2]])
reactDiff<-c("M_CO2_ext","M_ETOH_ext","M_OXY_ext") # quand ces id deréactifs sont présent en réactifs alors c'est une loi de diffusion sinon c'est MM généralisé
## Diffusion kinetic ##
# Cext : concentration out
# Cin : concentation in
# kdiff : diffusion constant
r_diffusion <- function(Cext,Cin,kdiff){
return((Cext-Cin)*kdiff)
}
## Michaelis-Menten Global ##
# kcat (value couple) : c(kcat+, kcat-) kinetic constant
# keq  : kinetic constant
# substrat  : vector of the substrat name of the reaction
# product  : vector of the product name of the reaction
# stochio_substrat : vector of the stochiometric of substrat
# stochio_product : vector of the stochiometric of product
MM_G <- function(kcat,keq,substrat, product, km_substrat, km_product, stochio_substrat, stochio_produit){
return(keq* (kcat[1]*prod((substrat/km_substrat)^stochio_substrat)-kcat[2]*prod((product/km_product)^stochio_product))/(1 + prod((substrat/km_substrat)^stochio_substrat)+ prod((product/km_product)^stochio_product)))
}
(xml_data$model$listOfCompartments[[2]])
essai<-(xml_data$model$listOfSpecies[[1]][[2]])
# Détermination du nombre de métabolites
nombreMetabo <- as.numeric(length(xml_data$model$listOfSpecies)) # 60 métabolites
nombreReact <- as.numeric(length(xml_data$model$listOfReactions)) # 57 réactions
# Récupération du nom des métabolites
metaboliteName <-c() # name
metaboliteNameMatrix <-c() # id # ATTENTION Dans les réaction on retrouve l'id et pas le nom exacte !!!!
for (i in seq(nombreMetabo)){
metaboliteName <-c(metaboliteName,xml_data$model$listOfSpecies[[i]][[2]])
metaboliteNameMatrix <-c(metaboliteNameMatrix,xml_data$model$listOfSpecies[[i]][[1]])
}
(metaboliteName)
(metaboliteNameMatrix)
# Initialistion de la matrice
# Avec en ligne l'id des molécules et en colones le nom de la réaction
matrix_sto_ode <- matrix(0,nrow = nombreMetabo, ncol = nombreReact)
colnames(matrix_sto_ode) <- as.character(1:nombreReact)
rownames(matrix_sto_ode) <- metaboliteNameMatrix
#matrix_sto_ode['M_ACETATE_ext',1] <- 5
# Remplissage de la matrice
#print(nombreReact)
# Pour chaque réaction
for (numReact in seq(nombreReact)){
#print(numReact)
# Récupération des ## Substrats ##
for (reactant in seq(length(xml_data$model$listOfReactions[[numReact]][[1]]))){
#print(reactant)
# Pour chaque réactant :
# on récupère l'id et la stochiométrie
nameReactant <- as.character(xml_data$model$listOfReactions[[numReact]][[1]][[reactant]][[1]]) # id de la molécule (avec m_ devant)
stochioReactant <- - as.numeric(xml_data$model$listOfReactions[[numReact]][[1]][[reactant]][[2]])
#print(nameReactant)
#print(stochioReactant)
#print("")
# Ajout dans la matrice
matrix_sto_ode[nameReactant,numReact] <-  stochioReactant # Attention Signe négatif car ici on consome la molécule
}
# Récupération des ## PRODUITS ##
for (reactant in seq(length(xml_data$model$listOfReactions[[numReact]][[2]]))){
# Pour chaque réactant :
# on récupère l'id et la stochiométrie
nameReactant <- as.character(xml_data$model$listOfReactions[[numReact]][[2]][[reactant]][[1]]) # id de la molécule (avec m_ devant)
stochioReactant <- as.numeric(xml_data$model$listOfReactions[[numReact]][[2]][[reactant]][[2]])
# Ajout dans la matrice
matrix_sto_ode[nameReactant,numReact] <- stochioReactant
}
}
(xml_data$model$listOfReactions[[1]][[2]])
(xml_data$model$listOfReactions[[1]][[1]][[1]][[1]]) # id de la molécule (avec m_ devant)
(xml_data$model$listOfReactions[[1]][[1]][[1]][[2]]) # stochio
nrow(matrix_sto_ode)
matrix_phi <- matrix(0,nrow = nrow(matrix_sto_ode))
A <- c("react1","react2")
B <- c("react2","react3")
C <- c("react4")
res <-intersect(A,B)
res1 <- setdiff(A,B)
(is.empty(res))
(is.null(intersect(A,B)))
(intersect(A,B))
vect <- c(intersect(A,B),intersect(A,C))
vect2 <- c(setdiff(A,B),setdiff(B,A))
"M_CO2_ext"
c<- "c_"+"essai"
c<- paste("c_","essai")
c<- paste("c","essai")
c<- paste("c","essai",collapse =NULL)
c<- paste("c","essai",collapse =TRUE)
c<- paste("c","essai",sep="")
c<- paste("c_","essai",sep="")
nomReactDiff<-c("CO2_ext","ETOH_ext","OXY_ext") # quand ces id deréactifs sont présent en réactifs alors c'est une loi de diffusion sinon c'est MM généralisé
reactDiff <-c("M_",nomReactDiff,sep="")
nomReactDiff<-c("CO2_ext","ETOH_ext","OXY_ext") # quand ces id deréactifs sont présent en réactifs alors c'est une loi de diffusion sinon c'est MM généralisé
reactDiff <- paste("M_",nomReactDiff,sep="")
View(parametersData)
(parametersData$diffusion)
dataEssais <- parametersData$diffusion
(parametersData$diffusion)
dataEssais <- parametersData$diffusion
(parametersData$diffusion)
View(dataEssais)
dataEssais <- parametersData$diffusion
(subset(x = dataEssais,X1="ex_co2"))
(parametersData$diffusion)
dataEssais <- parametersData$diffusion
essai<- subset(x = dataEssais,X1="ex_co2")
(parametersData$diffusion)
View(essai)
dataEssais <- parametersData$diffusion
essai<- subset(x = dataEssais,X1=="ex_co2")
(parametersData$diffusion)
View(essai)
dataEssais <- parametersData$diffusion
essai<- subset(x = dataEssais,X1=="ex_co2")
valeurRecherchee <- essai[[2]]
(parametersData$diffusion)
dataEssais <- parametersData$diffusion
essai<- subset(x = dataEssais,X1=="ex_co2")
valeurRecherchee <- essai[[2]]
(subset(parametersData$diffusion,X1=="ex_co2")[[2]])
a<-"CO2_ext"
b<- string_replacements(a,"_ext")
a<-"CO2_ext"
b<- string_replacements(a,list("_ext","")
a<-"CO2_ext"
b<- string_replacements(a,list("_ext",""))
a<-"CO2_ext"
b<- string_replacements(a,list("_ext",""))
(b)
a<-"CO2_ext"
b<- string_replacements(a,list("_ext",""))
b <- chartr("_ext","",a)
a<-"CO2_ext"
b<- string_replacements(a,list("_ext",""))
b <- gsub("_ext","",a)
(b)
a<-"M_CO2_ext"
b<- string_replacements(a,list("_ext",""))
b <- gsub("_ext","",a)
bbis <- gsub("M_","",b)
(b)
a<-"M_CO2_ext"
b<- string_replacements(a,list("_ext",""))
b <- gsub("_ext","",a)
bbis <- gsub("M_","",b)
(gsub("_ext","",gsub("M_","",a)))
